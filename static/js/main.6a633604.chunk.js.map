{"version":3,"sources":["components/RandomJoke.js","components/NameSearch.js","App.js","serviceWorker.js","index.js"],"names":["RandomJoke","state","onButtonPress","event","props","getRandomJokeFunc","className","type","onClick","this","React","Component","NameSearch","name","specialCharacters","handleKeyPress","e","key","checkName","indexOfSpace","indexOf","firstName","substring","secondName","length","getJokeWithNameFunc","alert","error","map","char","updateName","target","id","setState","value","placeholder","style","height","onKeyPress","onChange","axios","require","App","jokeData","jokeValues","display","getRandomJoke","get","then","response","data","catch","console","log","getJokeWithName","setVisibility","joke","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6a633604.chunk.js","sourcesContent":["import React from 'react';\n\nclass RandomJoke extends React.Component {\n    state = {\n       \n    }\n\n    onButtonPress = (event) => {\n\n        this.props.getRandomJokeFunc();\n    }\n\n    render() {\n        return (\n            <div className=\"col-12 col-lg-12\">\n                <button type=\"button\"\n                    className=\"btn btn-success\"\n                    onClick={this.onButtonPress}>\n                    Get Random Joke\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default RandomJoke;\n","import React from 'react';\n\nclass NameSearch extends React.Component {\n    state = {\n        name : \"\",\n        specialCharacters : [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\n                             \"!\",\"@\",\"£\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\",\"_\",\"+\",\"=\",\n                             \"{\",\"}\",\"[\",\"]\",\";\",\":\",\"|\",\"<\",\">\",\",\",\".\",\n                             \"\\\"\",\"'\",\"`\",\"~\",\"±\",\"§\",\"€\",\"/\",\"\\\\\"]\n    }\n\n    handleKeyPress = (e) => {\n\n        if (e.key === 'Enter') {\n            this.onButtonPress();\n        }\n    }\n    onButtonPress =() => {\n        if (!this.checkName()){\n            return;\n        }\n        const indexOfSpace = this.state.name.indexOf(\" \");\n\n        const firstName = this.state.name.substring(0, indexOfSpace);\n        const secondName = this.state.name.substring((indexOfSpace+1),this.state.name.length);\n\n        this.props.getJokeWithNameFunc(firstName, secondName);\n    }\n\n    checkName = () => {\n        if (this.state.name === \"\") {\n            alert(\"ERROR: You must enter a name\");\n            return false;\n        }\n        if (this.state.name.indexOf(\" \") === -1){\n            alert(\"ERROR: You must enter a first name and a second name separted with a space\");\n            return false;\n        }\n        let error = true;\n\n        this.state.specialCharacters.map(char => {\n            if (this.state.name.indexOf(char) > -1){\n                error = false;\n                return error;\n            }\n            return error;\n        });\n\n        if (error === false) {\n            alert(\"ERROR: Your name must not contain numbers or special characters\");\n            return false;\n        }\n\n        return true;\n    }\n\n    updateName = (event) => {\n        if (event.target.id === \"nameId\"){\n          this.setState({ name: event.target.value })\n        }\n    }\n\n    render() {\n        return (\n        \n            <div className=\"row padding-left\">\n                <div className=\"col-12 col-lg-10\" >\n                    <input\n                        id=\"nameId\"\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Enter a first name and a second name\" style={{ height: \"40px\"}}\n                        onKeyPress={this.handleKeyPress}\n                        value={this.state.name}\n                        onChange={this.updateName} />\n                </div>\n                \n                <div className=\"col-12 col-lg-2\">\n                    <button type=\"button \"\n                      style={{ height: \"40px\"}}\n                      className=\"btn btn-success\"\n                      onClick={this.onButtonPress}>\n                      Search\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default NameSearch;\n","import React from 'react';\nimport './App.css';\nimport RandomJoke from './components/RandomJoke';\nimport NameSearch from './components/NameSearch';\n\n\nconst axios = require('axios');\n\nclass App extends React.Component {\n\n  state = {\n    jokeData: [],\n    jokeValues: [],\n    display: false\n  }\n\n  getRandomJoke = () => {\n\n    axios.get('https://api.icndb.com/jokes/random?exclude=[explicit]?escape=javascript')\n      .then((response) => {\n\n        this.setState({\n          jokeData: response.data,\n          jokeValues: response.data.value\n        })\n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n  }\n  getJokeWithName = (firstName, secondName) => {\n\n    axios.get('https://api.icndb.com/jokes/random?exclude=[explicit]?escape=javascript&firstName=' + firstName +\n      '&lastName=' + secondName)\n      .then((response) => {\n\n        this.setState({\n          jokeData: response.data,\n          jokeValues: response.data.value,\n          display: false\n        })\n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n  }\n\n  setVisibility = () => {\n\n    this.setState({\n      display: true\n    })\n\n  }\n  render() {\n\n    return (\n      <div className=\"container-fluid text-block\">\n        <div className=\"row\">\n          <div className=\"col-12 col-lg-12\">\n            <h1>Chuck Norris Jokes</h1>\n          </div>\n        </div>\n        <br />\n        <br />\n        <div className=\"row\">\n          <div className=\"col-6 col-lg-2\">\n            <RandomJoke\n              getRandomJokeFunc={this.getRandomJoke}\n              key=\"1\" />\n          </div>\n\n          <div className=\"col-6 col-sm-6 col-lg-2 paddingleft paddingabove\">\n            <button type=\"button\"\n              className=\"btn btn-success paddingabove\"\n              onClick={this.setVisibility}>\n              Search Joke\n            </button>\n          </div>\n          <div className=\"col-8 col-lg-8\">\n            {this.state.display &&\n              <NameSearch\n                display={this.state.display}\n                getJokeWithNameFunc={this.getJokeWithName}\n                key=\"2\" />\n            }\n          </div>\n        </div>\n        <br />\n        <br />\n        <div className=\"row\">\n          <div className=\"col-12 col-lg-6\">\n            <h3>  {this.state.jokeValues.joke}</h3>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}